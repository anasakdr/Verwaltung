/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.sound.midi.Soundbank;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import static main.Gruppe.ps;
import static main.Gruppe.rs;

/**
 * Die Klasse Main enthält die Methode main und dient als Einstiegspunkt für das
 * Programm
 *
 * @author anas
 * @version 0.1
 */
public class PasswortListe extends javax.swing.JPanel {

    PreparedStatement ps = null;
    ResultSet rs = null;
    DefaultTableModel model;
    int rowCount;

    /**
     * Creates new form PasswortListe
     */
    public PasswortListe() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        Ändern = new javax.swing.JMenuItem();
        Löschen = new javax.swing.JMenuItem();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        passwortListe = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        passwortTabelle = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        anzeigen = new javax.swing.JButton();
        suchFeld = new javax.swing.JTextField();

        Ändern.setIcon(new javax.swing.ImageIcon("C:\\Users\\aalakdr\\Desktop\\exchange.png")); // NOI18N
        Ändern.setText("Ändern");
        Ändern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ÄndernActionPerformed(evt);
            }
        });
        jPopupMenu1.add(Ändern);

        Löschen.setIcon(new javax.swing.ImageIcon("C:\\Users\\aalakdr\\Desktop\\delete-photo.png")); // NOI18N
        Löschen.setText("Löschen");
        Löschen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LöschenActionPerformed(evt);
            }
        });
        jPopupMenu1.add(Löschen);

        setBackground(new java.awt.Color(11, 102, 122));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(60, 15, 108));
        jLabel3.setText("Verwendung");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 51, 51));
        jLabel4.setText("Suchen");

        passwortListe.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        passwortListe.setForeground(new java.awt.Color(60, 15, 108));
        passwortListe.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Privat", "Öffentlich" }));

        passwortTabelle.setAutoCreateRowSorter(true);
        passwortTabelle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Passwort", "Verwendung", "Gruppenname"
            }
        ));
        passwortTabelle.setRowSelectionAllowed(true);
        passwortTabelle.setUpdateSelectionOnSort(false);
        passwortTabelle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                passwortTabelleMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                passwortTabelleMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(passwortTabelle);

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton2.setForeground(new java.awt.Color(60, 15, 108));
        jButton2.setText("Zurück");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        anzeigen.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        anzeigen.setForeground(new java.awt.Color(60, 15, 108));
        anzeigen.setText("Anzeigen");
        anzeigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anzeigenActionPerformed(evt);
            }
        });

        suchFeld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                suchFeldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(passwortListe, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(47, 47, 47)
                .addComponent(suchFeld, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
            .addGroup(layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(jButton2)
                .addGap(281, 281, 281)
                .addComponent(anzeigen)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(78, 78, 78))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 665, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(suchFeld, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(passwortListe, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(anzeigen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(22, 22, 22))
        );
    }// </editor-fold>//GEN-END:initComponents
public void zeigen() {
        suchFeld.setText("");
        model = (DefaultTableModel) passwortTabelle.getModel();
        rowCount = model.getRowCount();
        //Löcht alle zeile von unsere Tabelle
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        if (passwortListe.getSelectedItem().toString() == "Privat") {
            try {
                String query = "SELECT * FROM keyring WHERE userid=?";

                ps = Utils.getConnection().prepareStatement(query);
                ps.setInt(1, Main.userId);
                rs = ps.executeQuery();
                while (rs.next()) {
                    // if (passwortListe.getSelectedIndex() == rs.getInt(5) || passwortListe.getSelectedIndex() == 2) {
                    model.addRow(new Object[]{Utils.aesDecryption(rs.getString(3)), rs.getString(4)});
                    // }
                }
            } catch (SQLException ex) {
                Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchPaddingException ex) {
                Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeyException ex) {
                Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalBlockSizeException ex) {
                Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadPaddingException ex) {
                Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                String query = "SELECT  g.passwort,g.Verwendung,ge.Name FROM gruppenxpasswort g ,gruppenxmitglieder m,gruppen ge \n"
                        + "WHERE g.gruppenid=m.gruppenid AND ge.ID=m.gruppenid AND m.userid=?";

                ps = Utils.getConnection().prepareStatement(query);
                ps.setInt(1, Main.userId);
                rs = ps.executeQuery();
                while (rs.next()) {
                    // if (passwortListe.getSelectedIndex() == rs.getInt(5) || passwortListe.getSelectedIndex() == 2) {
                    model.addRow(new Object[]{Utils.aesDecryption(rs.getString(1)), rs.getString(2), rs.getString(3)});
                    // }
                }
            } catch (SQLException ex) {
                Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchPaddingException ex) {
                Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeyException ex) {
                Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalBlockSizeException ex) {
                Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadPaddingException ex) {
                Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    private void anzeigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anzeigenActionPerformed
        zeigen();
    }//GEN-LAST:event_anzeigenActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Main.cl.show(Main.cardPanel, "UserMenue");
        suchFeld.setText("");
        model = (DefaultTableModel) passwortTabelle.getModel();
        rowCount = model.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);

        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void suchFeldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_suchFeldKeyReleased
        model = (DefaultTableModel) passwortTabelle.getModel();
        rowCount = model.getRowCount();
        //Löcht alle zeile von unsere Tabelle
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        if (passwortListe.getSelectedItem().toString() == "Privat") {
            try {
                String query = "SELECT * FROM keyring WHERE verwendung LIKE ? AND userid=?";

                ps = Utils.getConnection().prepareStatement(query);
                ps.setString(1, suchFeld.getText() + "%");
                ps.setInt(2, Main.userId);
                rs = ps.executeQuery();
                while (rs.next()) {
                    // if (passwortListe.getSelectedIndex() == rs.getInt(5) || passwortListe.getSelectedIndex() == 2) {
                    model.addRow(new Object[]{rs.getString(3), rs.getString(4)});
                    // }
                }
            } catch (SQLException ex) {
                Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                String query = "SELECT  gp.passwort,gp.Verwendung,gr.Name FROM gruppenxmitglieder gm,gruppenxpasswort gp ,gruppen gr ,users us WHERE  gp.gruppenid=gr.ID AND gm.gruppenid=gp.gruppenid AND us.ID=gm.userid AND gm.userid=? AND gp.Verwendung like ?";

                ps = Utils.getConnection().prepareStatement(query);
                ps.setInt(1, Main.userId);
                ps.setString(2, suchFeld.getText() + "%");
                rs = ps.executeQuery();
                while (rs.next()) {
                    // if (passwortListe.getSelectedIndex() == rs.getInt(5) || passwortListe.getSelectedIndex() == 2) {
                    model.addRow(new Object[]{rs.getString("gp.passwort"), rs.getString("gp.Verwendung"), rs.getString("gr.Name")});
                    // }
                }
            } catch (SQLException ex) {
                Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_suchFeldKeyReleased

    private void passwortTabelleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_passwortTabelleMouseClicked
        /*boolean a=passwortTabelle.isEditing();
         if(a==false){
         JOptionPane.showMessageDialog(null,"Sie Können das Passwort beim 'ÄNDERN Knobf' ändern");
         }*/
        //    int index=passwortTabelle.getSelectedRow();
        //   TableModel model=passwortTabelle.getModel();
      /* passwortTabelle.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
         ListSelectionModel model=passwortTabelle.getSelectionModel();
         model.addListSelectionListener(new ListSelectionListener() {

         @Override
         public void valueChanged(ListSelectionEvent e) {
         if(e.getValueIsAdjusting())
         {
         return;
         }
         ListSelectionModel ism=(ListSelectionModel)e.getSource();
         if(ism.isSelectionEmpty())
         {
         JOptionPane.showMessageDialog(null,"no ");
         }else
         {
         int selectedRow=ism.getMinSelectionIndex();
         JOptionPane.showMessageDialog(null, "Selected Row "+selectedRow);
         }
         }
         });*/
    }//GEN-LAST:event_passwortTabelleMouseClicked

    private void passwortTabelleMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_passwortTabelleMouseReleased
        if (evt.isPopupTrigger()) {
            jPopupMenu1.show(passwortTabelle, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_passwortTabelleMouseReleased

    private void ÄndernActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ÄndernActionPerformed
        int passID = 0;
        int ii = 0;
        int creatID = 0;
        int selectedRow = passwortTabelle.getSelectedRow();
        model = (DefaultTableModel) passwortTabelle.getModel();
        /// wenn die passwort nicht selected
        if (passwortTabelle.getSelectedRow() >= 0) {
            String sss = model.getValueAt(selectedRow, 1).toString();
            if (passwortListe.getSelectedItem().toString() == "Privat") {
                ii = JOptionPane.showConfirmDialog(null, "Sind Sie sicher, dass Sie dieses Passwort ändern wollen?", "Sicherheitsabfrage", JOptionPane.OK_CANCEL_OPTION);
                if (ii == JOptionPane.OK_OPTION) {
                     try {
                        String s = "SELECT ID FROM keyring WHERE Verwendung=? ";
                        ps = Utils.getConnection().prepareStatement(s);

                        ps.setString(1, sss);
                        rs = ps.executeQuery();
                        while (rs.next()) {
                            passID = rs.getInt(1);
                        }

                    } catch (SQLException ex) {
                        Logger.getLogger(Gruppe.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    JTextField passwort= new JTextField();
                    JTextField verwendung = new JTextField();
                    Object[] message = {"Neue Passwort", passwort,"Verwendungszweck", verwendung};

                    JOptionPane pane = new JOptionPane(message ,JOptionPane.PLAIN_MESSAGE, JOptionPane.OK_CANCEL_OPTION);
                    pane.createDialog(null, "Änderung des Passwort").setVisible(true);
                      try {
                        ps = Utils.getConnection().prepareStatement("UPDATE keyring SET Passwort=?,Verwendung=? WHERE ID=?");
                        ps.setString(1, Utils.aesEncryption(passwort.getText()));
                        ps.setString(2,verwendung.getText());
                        ps.setInt(3, passID);
                        ps.executeUpdate();
                        zeigen();

                    } catch (SQLException ex) {
                        Logger.getLogger(Gruppe.class.getName()).log(Level.SEVERE, null, ex);
                        //Zeig mir Massege
                        JOptionPane.showMessageDialog(null, "Passwort konnte nicht gelöscht werden");
                    } catch (UnsupportedEncodingException ex) {
                        Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (NoSuchAlgorithmException ex) {
                        Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (NoSuchPaddingException ex) {
                        Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InvalidKeyException ex) {
                        Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IllegalBlockSizeException ex) {
                        Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (BadPaddingException ex) {
                        Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }else//wenn nein geantwortet
                {
                    return;
                }

            } else//wenn öffentlich
            {
                ii = JOptionPane.showConfirmDialog(null, "Sind Sie sicher, dass Sie dieses Passwort ändern wollen?", "Sicherheitsabfrage", JOptionPane.OK_CANCEL_OPTION);
                if (ii == JOptionPane.OK_OPTION) {
                 String sssr = model.getValueAt(selectedRow, 2).toString();
                try {
                    String s = "SELECT creatorId FROM gruppen WHERE Name=? ";
                    ps = Utils.getConnection().prepareStatement(s);

                    ps.setString(1, sssr);
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        creatID = rs.getInt(1);
                    }

                } catch (SQLException ex) {
                    Logger.getLogger(Gruppe.class.getName()).log(Level.SEVERE, null, ex);
                }

                try {
                    String s = "SELECT ID FROM gruppenxpasswort WHERE Verwendung=? ";
                    ps = Utils.getConnection().prepareStatement(s);

                    ps.setString(1, sss);
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        passID = rs.getInt(1);
                    }

                } catch (SQLException ex) {
                    Logger.getLogger(Gruppe.class.getName()).log(Level.SEVERE, null, ex);
                }
                JTextField passwort= new JTextField();
                    JTextField verwendung = new JTextField();
                    Object[] message = {"Neue Passwort", passwort,"Verwendungszweck", verwendung};

                    JOptionPane pane = new JOptionPane(message ,JOptionPane.PLAIN_MESSAGE, JOptionPane.OK_CANCEL_OPTION);
                    pane.createDialog(null, "Änderung des Passwort").setVisible(true);
                    try {
                            //String query = "UPDATE gruppenxpasswort SET passwort=?,Verwendung=? gruppenxpasswort INNER JOIN gruppen ON gruppen.ID = gruppenxpasswort.gruppenid WHERE gruppen.creatorId=? AND gruppenxpasswort.ID=?";
                            String query = "UPDATE gruppenxpasswort INNER JOIN gruppen ON gruppen.ID = gruppenxpasswort.gruppenid SET passwort=?,Verwendung=? WHERE gruppen.creatorId=? AND gruppenxpasswort.ID=?";
                            ps = Utils.getConnection().prepareStatement(query);
                            ps.setString(1, Utils.aesEncryption(passwort.getText()));
                            ps.setString(2, verwendung.getText());
                            ps.setInt(3, Main.userId);
                            ps.setInt(4, passID);
                            if (ps.executeUpdate() == 1) {
                                JOptionPane.showMessageDialog(null, "Passwort erfolgreich geändertt");
                                zeigen();
                            } else {
                                JOptionPane.showMessageDialog(null, "Sie haben keine Berechtigung dieses Passwort zu ändern");
                                return;
                            }
                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(null, "Ein Fehler ist aufgetreten");
                        } catch (UnsupportedEncodingException ex) {
                        Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (NoSuchAlgorithmException ex) {
                        Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (NoSuchPaddingException ex) {
                        Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InvalidKeyException ex) {
                        Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IllegalBlockSizeException ex) {
                        Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (BadPaddingException ex) {
                        Logger.getLogger(PasswortListe.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                }else//wenn öffentlich und antwortet nein
                {
                    return;
                }
            }
        }else
        {
            JOptionPane.showMessageDialog(null,"Kein Passwort ausgewählt");
            return;
        }
    }//GEN-LAST:event_ÄndernActionPerformed

    private void LöschenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LöschenActionPerformed
        int ii = 0;
        int passID = 0;
        int passGID = 0;
        int creatID = 0;
        int userid = 0;
        boolean action = false;

        int selectedRow = passwortTabelle.getSelectedRow();
        // if(selectedRow!=null)

        model = (DefaultTableModel) passwortTabelle.getModel();
        /// wenn die passwort nicht selected
        if (passwortTabelle.getSelectedRow() >= 0) {
            String sss = model.getValueAt(selectedRow, 1).toString();
            if (passwortListe.getSelectedItem().toString() == "Privat") {
                ii = JOptionPane.showConfirmDialog(null, "Sind Sie sicher, dass Sie dieses Passwort löschen wollen?", "Sicherheitsabfrage", JOptionPane.OK_CANCEL_OPTION);
                if (ii == JOptionPane.OK_OPTION) {

                    try {
                        String s = "SELECT ID FROM keyring WHERE Verwendung=? ";
                        ps = Utils.getConnection().prepareStatement(s);

                        ps.setString(1, sss);
                        rs = ps.executeQuery();
                        while (rs.next()) {
                            passID = rs.getInt(1);
                        }

                    } catch (SQLException ex) {
                        Logger.getLogger(Gruppe.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        ps = Utils.getConnection().prepareStatement("DELETE FROM  keyring WHERE ID=?");
                        ps.setInt(1, passID);
                        ps.executeUpdate();
                        zeigen();

                    } catch (SQLException ex) {
                        Logger.getLogger(Gruppe.class.getName()).log(Level.SEVERE, null, ex);
                        //Zeig mir Massege
                        JOptionPane.showMessageDialog(null, "Passwort konnte nicht gelöscht werden");
                    }

                } else if (ii == JOptionPane.CANCEL_OPTION) {
                    // JOptionPane.showMessageDialog(null, ":)", "Sicherheitsabfrage", JOptionPane.ERROR_MESSAGE);
                }
            } else {//wenn offentlisch ist
                String sssr = model.getValueAt(selectedRow, 2).toString();
                try {
                    String s = "SELECT creatorId FROM gruppen WHERE Name=? ";
                    ps = Utils.getConnection().prepareStatement(s);

                    ps.setString(1, sssr);
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        creatID = rs.getInt(1);
                    }

                } catch (SQLException ex) {
                    Logger.getLogger(Gruppe.class.getName()).log(Level.SEVERE, null, ex);
                }

                try {
                    String s = "SELECT ID FROM gruppenxpasswort WHERE Verwendung=? ";
                    ps = Utils.getConnection().prepareStatement(s);

                    ps.setString(1, sss);
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        passID = rs.getInt(1);
                    }

                } catch (SQLException ex) {
                    Logger.getLogger(Gruppe.class.getName()).log(Level.SEVERE, null, ex);
                }

                ii = JOptionPane.showConfirmDialog(null, "Sind Sie sicher, dass Sie dieses Passwort löschen wollen?", "Sicherheitsabfrage", JOptionPane.OK_CANCEL_OPTION);

                if (ii == JOptionPane.OK_OPTION) {
                    {
                        try {
                            String query = "DELETE gruppenxpasswort FROM gruppenxpasswort INNER JOIN gruppen ON gruppen.ID = gruppenxpasswort.gruppenid WHERE gruppen.creatorId=? AND gruppenxpasswort.ID=?";

                            ps = Utils.getConnection().prepareStatement(query);
                            ps.setInt(1, Main.userId);
                            ps.setInt(2, passID);
                            if (ps.executeUpdate() == 1) {
                                JOptionPane.showMessageDialog(null, "Passwort erfolgreich gelöscht");
                                zeigen();
                            } else {
                                JOptionPane.showMessageDialog(null, "Sie haben keine Berechtigung dieses Passwort zu löschen");
                                return;
                            }
                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(null, "Ein Fehler ist aufgetreten");
                        }
                    }

                } else if (ii == JOptionPane.CANCEL_OPTION) {
                    //   JOptionPane.showMessageDialog(null, ":)", "Sicherheitsabfrage", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Kein Passwort ausgewählt ");
        }
    }//GEN-LAST:event_LöschenActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Löschen;
    private javax.swing.JButton anzeigen;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox passwortListe;
    private javax.swing.JTable passwortTabelle;
    private javax.swing.JTextField suchFeld;
    private javax.swing.JMenuItem Ändern;
    // End of variables declaration//GEN-END:variables
}
